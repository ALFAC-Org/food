# Ref: https://www.docker.com/blog/docker-v2-github-action-is-now-ga/
name: CI/CD

on:
  push:
    branches:
      - feat/apply-new-version
  pull_request:
    branches:
      - feat/apply-new-version
  workflow_dispatch:

jobs:
  build-docker-image:
    runs-on: ubuntu-latest

    env:
      BUILD_VERSION: ${{ github.event.inputs.app_image_version || github.sha }}
      NODE_ROLE_ARN: ${{ secrets.NODE_ROLE_ARN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Docker
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.prod.yml
          build-args: |
            APPLICATION_VERSION=${{ env.BUILD_VERSION }}
          platforms: linux/amd64
          push: true
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:cache,mode=max
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ env.BUILD_VERSION }}

  apply-new-version:
    runs-on: ubuntu-latest
    needs: build-docker-image

    env:
      BUILD_VERSION: ${{ github.event.inputs.app_image_version || github.sha }}
      NODE_ROLE_ARN: ${{ secrets.NODE_ROLE_ARN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Clone Terraform Config Repository
        run: git clone https://github.com/ALFAC-Org/food-cloud-infra.git

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init -reconfigure
        working-directory: food-cloud-infra

      - name: Terraform Validate
        run: terraform validate
        working-directory: food-cloud-infra

      - name: Terraform Plan
        # run: ../terraform/dev/terraform.sh plan
        run: |
          terraform plan \
          -var "node_role_arn=${{ secrets.ARN_AWS_LAB_ROLE }}" \
          -var "aws_region=${{ secrets.AWS_REGION }}" \
          -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -var "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" \
          -var "image_name=${{ secrets.IMAGE_NAME }}" \
          -var "image_version=${{ env.BUILD_VERSION }}" \
          -var "cluster_name=${{ secrets.CLUSTER_NAME }}" \
          -var "app_port=${{ secrets.APP_PORT }}"
        working-directory: food-cloud-infra

      - name: Terraform Apply
        # run: ../terraform/dev/terraform.sh apply -auto-approve
        run: |
          terraform apply -auto-approve \
          -var "node_role_arn=${{ secrets.ARN_AWS_LAB_ROLE }}" \
          -var "aws_region=${{ secrets.AWS_REGION }}" \
          -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -var "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" \
          -var "image_name=${{ secrets.IMAGE_NAME }}" \
          -var "image_version=${{ env.BUILD_VERSION }}" \
          -var "cluster_name=${{ secrets.CLUSTER_NAME }}" \
          -var "app_port=${{ secrets.APP_PORT }}"
        working-directory: food-cloud-infra
